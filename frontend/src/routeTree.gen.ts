/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as WorkerViewIndexImport } from './routes/worker-view/index';
import { Route as MapViewIndexImport } from './routes/map-view/index';
import { Route as DailyPlanIndexImport } from './routes/daily-plan/index';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const WorkerViewIndexRoute = WorkerViewIndexImport.update({
  id: '/worker-view/',
  path: '/worker-view/',
  getParentRoute: () => rootRoute,
} as any);

const MapViewIndexRoute = MapViewIndexImport.update({
  id: '/map-view/',
  path: '/map-view/',
  getParentRoute: () => rootRoute,
} as any);

const DailyPlanIndexRoute = DailyPlanIndexImport.update({
  id: '/daily-plan/',
  path: '/daily-plan/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/daily-plan/': {
      id: '/daily-plan/';
      path: '/daily-plan';
      fullPath: '/daily-plan';
      preLoaderRoute: typeof DailyPlanIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/map-view/': {
      id: '/map-view/';
      path: '/map-view';
      fullPath: '/map-view';
      preLoaderRoute: typeof MapViewIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/worker-view/': {
      id: '/worker-view/';
      path: '/worker-view';
      fullPath: '/worker-view';
      preLoaderRoute: typeof WorkerViewIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/daily-plan': typeof DailyPlanIndexRoute;
  '/map-view': typeof MapViewIndexRoute;
  '/worker-view': typeof WorkerViewIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/daily-plan': typeof DailyPlanIndexRoute;
  '/map-view': typeof MapViewIndexRoute;
  '/worker-view': typeof WorkerViewIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/daily-plan/': typeof DailyPlanIndexRoute;
  '/map-view/': typeof MapViewIndexRoute;
  '/worker-view/': typeof WorkerViewIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/daily-plan' | '/map-view' | '/worker-view';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/daily-plan' | '/map-view' | '/worker-view';
  id: '__root__' | '/' | '/daily-plan/' | '/map-view/' | '/worker-view/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DailyPlanIndexRoute: typeof DailyPlanIndexRoute;
  MapViewIndexRoute: typeof MapViewIndexRoute;
  WorkerViewIndexRoute: typeof WorkerViewIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DailyPlanIndexRoute: DailyPlanIndexRoute,
  MapViewIndexRoute: MapViewIndexRoute,
  WorkerViewIndexRoute: WorkerViewIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/daily-plan/",
        "/map-view/",
        "/worker-view/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/daily-plan/": {
      "filePath": "daily-plan/index.tsx"
    },
    "/map-view/": {
      "filePath": "map-view/index.tsx"
    },
    "/worker-view/": {
      "filePath": "worker-view/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
